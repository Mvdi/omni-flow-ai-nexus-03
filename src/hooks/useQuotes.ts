import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface Quote {
  id: string;
  lead_id: string | null;
  customer_email: string;
  customer_name: string | null;
  quote_number: string;
  title: string;
  description: string | null;
  items: any[];
  total_amount: number;
  currency: string;
  status: 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired';
  valid_until: string | null;
  template_used: string | null;
  notes: string | null;
  created_at: string;
  updated_at: string;
  user_id: string;
}

export interface QuoteTemplate {
  id: string;
  name: string;
  description: string | null;
  template_content: string;
  is_default: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
}

export const useQuotes = () => {
  return useQuery({
    queryKey: ['quotes'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('quotes')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data as Quote[];
    },
  });
};

export const useQuoteTemplates = () => {
  return useQuery({
    queryKey: ['quote-templates'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('quote_templates')
        .select('*')
        .order('is_default', { ascending: false });
      
      if (error) throw error;
      return data as QuoteTemplate[];
    },
  });
};

export const useCreateQuote = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (quoteData: Omit<Quote, 'id' | 'quote_number' | 'created_at' | 'updated_at' | 'user_id'>) => {
      const user = (await supabase.auth.getUser()).data.user;
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('quotes')
        .insert({
          ...quoteData,
          user_id: user.id,
          quote_number: '' // Will be auto-generated by trigger
        })
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['quotes'] });
      toast({
        title: "Tilbud oprettet",
        description: "Det nye tilbud er blevet oprettet succesfuldt.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Fejl",
        description: "Kunne ikke oprette tilbud: " + error.message,
        variant: "destructive",
      });
    },
  });
};

export const useUpdateQuote = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Quote> }) => {
      const { data, error } = await supabase
        .from('quotes')
        .update(updates)
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['quotes'] });
      toast({
        title: "Tilbud opdateret",
        description: "Tilbuddet er blevet opdateret.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Fejl",
        description: "Kunne ikke opdatere tilbud: " + error.message,
        variant: "destructive",
      });
    },
  });
};